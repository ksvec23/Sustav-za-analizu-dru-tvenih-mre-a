% Vlastiti predikat za članstvo u listi
my_member(X, [X|_]).
my_member(X, [_|T]) :- my_member(X, T).

% intersection/3 vraća zajedničke elemente između dvije liste
intersection([], _, []).
intersection([H|T], List2, [H|Rest]) :-
    my_member(H, List2),  % Provjera da li je element H prisutan u List2
    intersection(T, List2, Rest).
intersection([_|T], List2, Rest) :-
    intersection(T, List2, Rest).

% Vlastiti predikat za pretvaranje liste u skup
list_to_set([], []).
list_to_set([H|T], [H|Set]) :-
    \+ my_member(H, T),  % Provjeri je li element već u ostatku liste
    list_to_set(T, Set).
list_to_set([H|T], Set) :-
    my_member(H, T),  % Ako je element već u listi, preskoči ga
    list_to_set(T, Set).

% Vlastiti predikat za izračun duljine liste
my_length([], 0).  % Duljina prazne liste je 0
my_length([_|T], N) :- my_length(T, N1), N is N1 + 1.

% Spajanje dvije liste
append([], L, L).
append([H|T], L, [H|R]) :- append(T, L, R).

% Stupanj čvora
degree(Node, Count) :-
    findall(Other, (edge(Node, Other); edge(Other, Node)), Connections),
    sort(Connections, UniqueConnections),
    my_length(UniqueConnections, Count).

% top N najutjecajnijih čvorova
top_influential(N, TopNodes) :-
    %dohvaćanje čvorova
    findall(Node, (edge(Node, _); edge(_, Node)), Nodes),
    sort(Nodes, UniqueNodes),  % Filtriramo jedinstvene čvorove
    %pronalaženje stupnja
    findall((Node, Count), (my_member(Node, UniqueNodes), degree(Node, Count)), NodeDegrees),
    %sortiranje prema stupnju
    sort_by_degree(NodeDegrees, SortedNodeDegrees),
    %prikaz prvih N čvorova
    take(N, SortedNodeDegrees, TopNodes).

% Sortiranje čvorova prema stupnju
sort_by_degree(NodeDegrees, Sorted) :-
    quicksort(NodeDegrees, Sorted).

quicksort([], []).
quicksort([H|T], Sorted) :-
    partition(H, T, Smaller, Greater),
    quicksort(Smaller, SortedSmaller),
    quicksort(Greater, SortedGreater),
    append(SortedGreater, [H|SortedSmaller], Sorted).

partition(_, [], [], []).
partition((_, Count1), [(Node2, Count2)|T], [(Node2, Count2)|Smaller], Greater) :-
    Count2 =< Count1,
    partition((_, Count1), T, Smaller, Greater).
partition((_, Count1), [(Node2, Count2)|T], Smaller, [(Node2, Count2)|Greater]) :-
    Count2 > Count1,
    partition((_, Count1), T, Smaller, Greater).

% Uzimanje prvih N elemenata iz liste
take(0, _, []).
take(_, [], []).
take(N, [H|T], [H|Rest]) :-
    N > 0,
    N1 is N - 1,
    take(N1, T, Rest).

%-----------------------------------------------------
% Provjera da li su dva čvora međusobno povezani
connected(X, Y) :- edge(X, Y).
connected(X, Y) :- edge(Y, X).

% Pravilo za pronalaženje klika
clique([X, Y, Z]) :-
    connected(X, Y),
    connected(X, Z),
    connected(Y, Z).

% Pravilo za pronalaženje klikova s više od 3 čvora
clique([X, Y, Z | Rest]) :-
    connected(X, Y),
    connected(X, Z),
    connected(Y, Z),
    clique([Y, Z | Rest]),
    all_connected([X, Y, Z | Rest]).

% Provjera da li su svi čvorovi povezani
all_connected([]).
all_connected([_]).
all_connected([X, Y | Rest]) :-
    connected(X, Y),
    all_connected([Y | Rest]).

%-------------------------------------------
connected(User1, User2) :-
    feature(User1, Feature),
    feature(User2, Feature),
    User1 \= User2.  % Osiguravamo da korisnici nisu isti

% Pravilo za traženje svih korisnika koji su povezani s određenim korisnikom
cluster(User, Cluster) :-
    findall(ConnectedUser, connected(User, ConnectedUser), Cluster).
